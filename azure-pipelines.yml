trigger:
  - main
  - develop

pr:
  - main
  - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '20.x'
  # Security scanning variables
  sonarProjectKey: 'my-react-app'
  sonarOrganization: 'your-sonar-org'  # Replace with your SonarCloud organization
  # Environment variables
  devEnvironment: 'development'
  stageEnvironment: 'staging'
  prodEnvironment: 'production'
  # Key Vault variables
  keyVaultName: 'your-keyvault-name'  # Replace with your Key Vault name
  resourceGroupName: 'your-resource-group'  # Replace with your resource group
  # App Service (Web App) variables
  appServicePlanName: 'my-react-app-plan'
  webAppNameDev: 'my-react-app-dev'      # Replace with your actual Web App name
  webAppNameStage: 'my-react-app-stage'  # Replace with your actual Web App name
  webAppNameProd: 'my-react-app-prod'    # Replace with your actual Web App name
  # Static website (no Docker) variables
  staticIndexDocument: 'index.html'
  staticErrorDocument: 'index.html'      # SPA fallback
  storageAccountNameDev: 'yourdevstorageacct'       # must be globally unique, lowercase, 3-24 chars
  storageAccountNameStage: 'yourstagestorageacct'   # must be globally unique
  storageAccountNameProd: 'yourprodstorageacct'     # must be globally unique
  # Sonar (Cloud or self-hosted SonarQube)
  sonarHostUrl: 'https://sonarcloud.io'  # Set to your SonarQube URL when not using SonarCloud

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build React App'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install Dependencies'

    - script: |
        npm run lint
      displayName: 'Run Linting'

    - script: |
        npm run build
      displayName: 'Build Application'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'dist'
        artifactName: 'drop'
      displayName: 'Publish Build Artifacts'

    # Security Scanning - OWASP Dependency-Check via CLI (no Docker)
    - script: |
        set -e
        mkdir -p $(System.DefaultWorkingDirectory)/reports
        curl -sSL https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.2/dependency-check-10.0.2-release.zip -o dc.zip
        sudo apt-get update -y && sudo apt-get install -y unzip
        unzip -q dc.zip -d dc
        dc/dependency-check/bin/dependency-check.sh \
          --scan $(System.DefaultWorkingDirectory) \
          --format HTML \
          --format XML \
          --out $(System.DefaultWorkingDirectory)/reports \
          --project "my-react-app"
      displayName: 'Dependency Vulnerability Scan (OWASP DC CLI)'

    # Static Code Analysis - Sonar (Cloud or SonarQube)
    - script: |
        set -e
        sudo apt-get update -y
        sudo apt-get install -y unzip curl
        SCANNER_VERSION=5.0.1.3006
        curl -sSLo scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-$SCANNER_VERSION-linux.zip
        unzip -q scanner.zip
        mv sonar-scanner-* sonar-scanner
        export PATH=$(pwd)/sonar-scanner/bin:$PATH
        if [ -z "$(sonarOrganization)" ] || [ "$(sonarHostUrl)" != "https://sonarcloud.io" ]; then
          echo "Running against SonarQube at $(sonarHostUrl)"
          sonar-scanner \
            -Dsonar.projectKey=$(sonarProjectKey) \
            -Dsonar.host.url=$(sonarHostUrl) \
            -Dsonar.login=$(SONAR_TOKEN) \
            -Dsonar.sources=src \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
        else
          echo "Running against SonarCloud"
          sonar-scanner \
            -Dsonar.projectKey=$(sonarProjectKey) \
            -Dsonar.organization=$(sonarOrganization) \
            -Dsonar.host.url=$(sonarHostUrl) \
            -Dsonar.login=$(SONAR_TOKEN) \
            -Dsonar.sources=src \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
        fi
      displayName: 'Sonar Analysis (SonarCloud/SonarQube)'
      env:
        SONAR_TOKEN: $(SONAR_TOKEN)
      condition: and(succeeded(), ne(variables['SONAR_TOKEN'], ''))

    # (Optional) Add other CLI-based scans here

    # Publish Dependency-Check Reports as artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)/reports'
        artifactName: 'dependency-check'
      displayName: 'Publish Dependency-Check Reports'
      condition: ne(variables['Build.Reason'], 'PullRequest')

- stage: DeployToDev
  displayName: 'Development Stage'
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToDevelopment
    displayName: 'Deploy to Development'
    environment: $(devEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - script: echo "Deployment disabled until service connections are configured."
            displayName: 'Deployment Disabled'

- stage: DeployToStage
  displayName: 'Staging Stage'
  dependsOn: DeployToDev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging'
    environment: $(stageEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - script: echo "Deployment disabled until service connections are configured."
            displayName: 'Deployment Disabled'

- stage: DeployToProd
  displayName: 'Production Stage'
  dependsOn: DeployToStage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    environment: $(prodEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - script: echo "Deployment disabled until service connections are configured."
            displayName: 'Deployment Disabled'

# Rollback Stage (Manual trigger)
- stage: Rollback
  displayName: 'Rollback Stage'
  dependsOn: []
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
  - deployment: RollbackDeployment
    displayName: 'Rollback Deployment'
    environment: $(prodEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo "Rollback disabled until service connections are configured."
            displayName: 'Rollback Disabled'