trigger:
  - main
  - develop

pr:
  - main
  - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '20.x'
  dockerImageName: 'my-react-app'
  dockerRegistry: 'your-registry.azurecr.io'  # Replace with your registry
  acrName: 'your-registry'  # e.g. your-registry if registry is your-registry.azurecr.io
  # Security scanning variables
  sonarProjectKey: 'my-react-app'
  sonarOrganization: 'your-sonar-org'  # Replace with your SonarCloud organization
  trivyImageName: 'aquasec/trivy:latest'
  # Environment variables
  devEnvironment: 'development'
  stageEnvironment: 'staging'
  prodEnvironment: 'production'
  # Key Vault variables
  keyVaultName: 'your-keyvault-name'  # Replace with your Key Vault name
  resourceGroupName: 'your-resource-group'  # Replace with your resource group
  # App Service (Web App) variables
  appServicePlanName: 'my-react-app-plan'
  webAppNameDev: 'my-react-app-dev'      # Replace with your actual Web App name
  webAppNameStage: 'my-react-app-stage'  # Replace with your actual Web App name
  webAppNameProd: 'my-react-app-prod'    # Replace with your actual Web App name
  # Static website (no Docker) variables
  staticIndexDocument: 'index.html'
  staticErrorDocument: 'index.html'      # SPA fallback
  storageAccountNameDev: 'yourdevstorageacct'       # must be globally unique, lowercase, 3-24 chars
  storageAccountNameStage: 'yourstagestorageacct'   # must be globally unique
  storageAccountNameProd: 'yourprodstorageacct'     # must be globally unique

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build React App'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install Dependencies'

    - script: |
        npm run lint
      displayName: 'Run Linting'

    - script: |
        npm run build
      displayName: 'Build Application'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'dist'
        artifactName: 'drop'
      displayName: 'Publish Build Artifacts'

    # Security Scanning - Dependency Check
    - task: DependencyCheck@5
      inputs:
        projectName: 'my-react-app'
        scanPath: '$(System.DefaultWorkingDirectory)'
        format: 'HTML'
        out: '$(System.DefaultWorkingDirectory)/reports'
      displayName: 'Dependency Vulnerability Scan'

    # Security Scanning - SonarCloud Analysis
    - task: SonarCloud@1
      inputs:
        SonarCloud: 'your-sonarcloud-connection'  # Replace with your SonarCloud service connection
        organization: $(sonarOrganization)
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: $(sonarProjectKey)
        cliProjectName: 'my-react-app'
        cliSources: 'src'
        cliLanguage: 'js,ts'
        cliCoverageReportPaths: 'coverage/lcov.info'
        cliAdditionalArguments: >
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
      displayName: 'SonarCloud Code Analysis'

    # Security Scanning - Container Image Scan
    - task: Docker@2
      inputs:
        containerRegistry: 'your-acr-connection'  # Replace with your ACR connection
        repository: $(dockerImageName)
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
      displayName: 'Build and Push Docker Image'
      condition: ne(variables['Build.Reason'], 'PullRequest')

    # Container Security Scan with Trivy
    - script: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          $(trivyImageName) image \
          --format json \
          --output trivy-results.json \
          $(dockerRegistry)/$(dockerImageName):$(Build.BuildId)
      displayName: 'Container Security Scan (Trivy)'
      condition: ne(variables['Build.Reason'], 'PullRequest')

    # Publish Security Scan Results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/trivy-results.json'
        mergeTestResults: true
        testRunTitle: 'Security Scan Results'
      displayName: 'Publish Security Scan Results'
      condition: ne(variables['Build.Reason'], 'PullRequest')

    # Publish Dependency Check Results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/dependency-check-report.xml'
        mergeTestResults: true
        testRunTitle: 'Dependency Check Results'
      displayName: 'Publish Dependency Check Results'
      condition: ne(variables['Build.Reason'], 'PullRequest')

- stage: DeployToDev
  displayName: 'Development Stage'
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToDevelopment
    displayName: 'Deploy to Development'
    environment: $(devEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          
          # Get secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'your-azure-subscription'  # Replace with your Azure subscription
              KeyVaultName: $(keyVaultName)
              SecretsFilter: '*'
              RunAsPreJob: true
            displayName: 'Get Secrets from Key Vault'

          # Provision (idempotent) App Service plan and Web App if missing
          - task: AzureCLI@2
            displayName: 'Provision App Service plan and Web App (Dev)'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                # Ensure RG exists
                az group create -n $(resourceGroupName) -l eastus 1>/dev/null
                # Create or update App Service Plan (Linux)
                az appservice plan show -g $(resourceGroupName) -n $(appServicePlanName) 1>/dev/null 2>&1 \
                  || az appservice plan create -g $(resourceGroupName) -n $(appServicePlanName) --is-linux --sku B1
                # Create Web App if missing
                az webapp show -g $(resourceGroupName) -n $(webAppNameDev) 1>/dev/null 2>&1 \
                  || az webapp create -g $(resourceGroupName) -p $(appServicePlanName) -n $(webAppNameDev) -i $(dockerRegistry)/$(dockerImageName):$(Build.BuildId)
                # Pull ACR creds
                ACR_USERNAME=$(az acr credential show -n $(acrName) --query username -o tsv)
                ACR_PASSWORD=$(az acr credential show -n $(acrName) --query passwords[0].value -o tsv)
                # Configure container image with registry credentials
                az webapp config container set \
                  -g $(resourceGroupName) -n $(webAppNameDev) \
                  -i $(dockerRegistry)/$(dockerImageName):$(Build.BuildId) \
                  -r https://$(dockerRegistry) -u $ACR_USERNAME -p $ACR_PASSWORD
                # Apply app settings from KeyVault values
                az webapp config appsettings set -g $(resourceGroupName) -n $(webAppNameDev) \
                  --settings NODE_ENV=development API_URL=$(API_URL) DATABASE_URL=$(DATABASE_URL)
                # Restart web app
                az webapp restart -g $(resourceGroupName) -n $(webAppNameDev)

          - script: |
              # Health check for development Web App
              sleep 30
              curl -f https://$(webAppNameDev).azurewebsites.net || exit 1
            displayName: 'Development Health Check'

          # Store deployment info for rollback
          - script: |
              echo "##vso[task.setvariable variable=DEV_IMAGE_TAG]$(Build.BuildId)"
              echo "##vso[task.setvariable variable=DEV_DEPLOYMENT_TIME]$(date)"
            displayName: 'Store Deployment Info'

- stage: DeployToStage
  displayName: 'Staging Stage'
  dependsOn: DeployToDev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging'
    environment: $(stageEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          
          # Get secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'your-azure-subscription'
              KeyVaultName: $(keyVaultName)
              SecretsFilter: '*'
              RunAsPreJob: true
            displayName: 'Get Secrets from Key Vault'

          - task: AzureCLI@2
            displayName: 'Deploy to Azure Web App (Stage)'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                # Ensure plan exists
                az appservice plan show -g $(resourceGroupName) -n $(appServicePlanName) 1>/dev/null 2>&1 \
                  || az appservice plan create -g $(resourceGroupName) -n $(appServicePlanName) --is-linux --sku B1
                # Ensure stage Web App exists
                az webapp show -g $(resourceGroupName) -n $(webAppNameStage) 1>/dev/null 2>&1 \
                  || az webapp create -g $(resourceGroupName) -p $(appServicePlanName) -n $(webAppNameStage) -i $(dockerRegistry)/$(dockerImageName):$(Build.BuildId)
                # ACR creds
                ACR_USERNAME=$(az acr credential show -n $(acrName) --query username -o tsv)
                ACR_PASSWORD=$(az acr credential show -n $(acrName) --query passwords[0].value -o tsv)
                # Configure container
                az webapp config container set \
                  -g $(resourceGroupName) -n $(webAppNameStage) \
                  -i $(dockerRegistry)/$(dockerImageName):$(Build.BuildId) \
                  -r https://$(dockerRegistry) -u $ACR_USERNAME -p $ACR_PASSWORD
                # App settings
                az webapp config appsettings set -g $(resourceGroupName) -n $(webAppNameStage) \
                  --settings NODE_ENV=staging API_URL=$(API_URL) DATABASE_URL=$(DATABASE_URL)
                az webapp restart -g $(resourceGroupName) -n $(webAppNameStage)

          - script: |
              # Health check for staging Web App
              sleep 30
              curl -f https://$(webAppNameStage).azurewebsites.net || exit 1
            displayName: 'Staging Health Check'

          # Store deployment info for rollback
          - script: |
              echo "##vso[task.setvariable variable=STAGE_IMAGE_TAG]$(Build.BuildId)"
              echo "##vso[task.setvariable variable=STAGE_DEPLOYMENT_TIME]$(date)"
            displayName: 'Store Staging Deployment Info'

          # Run comprehensive tests in staging
          - script: |
              echo "Running comprehensive tests in staging..."
              # Add your staging tests here
            displayName: 'Staging Tests'

          # (Optional) Add integration tests against https://$(webAppNameStage).azurewebsites.net

- stage: DeployToProd
  displayName: 'Production Stage'
  dependsOn: DeployToStage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    environment: $(prodEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          
          # Get secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'your-azure-subscription'
              KeyVaultName: $(keyVaultName)
              SecretsFilter: '*'
              RunAsPreJob: true
            displayName: 'Get Secrets from Key Vault'

          - task: AzureCLI@2
            displayName: 'Deploy to Azure Web App (Prod)'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                # Ensure plan exists
                az appservice plan show -g $(resourceGroupName) -n $(appServicePlanName) 1>/dev/null 2>&1 \
                  || az appservice plan create -g $(resourceGroupName) -n $(appServicePlanName) --is-linux --sku B1
                # Ensure prod Web App exists
                az webapp show -g $(resourceGroupName) -n $(webAppNameProd) 1>/dev/null 2>&1 \
                  || az webapp create -g $(resourceGroupName) -p $(appServicePlanName) -n $(webAppNameProd) -i $(dockerRegistry)/$(dockerImageName):$(Build.BuildId)
                # ACR creds
                ACR_USERNAME=$(az acr credential show -n $(acrName) --query username -o tsv)
                ACR_PASSWORD=$(az acr credential show -n $(acrName) --query passwords[0].value -o tsv)
                # Configure container
                az webapp config container set \
                  -g $(resourceGroupName) -n $(webAppNameProd) \
                  -i $(dockerRegistry)/$(dockerImageName):$(Build.BuildId) \
                  -r https://$(dockerRegistry) -u $ACR_USERNAME -p $ACR_PASSWORD
                # App settings
                az webapp config appsettings set -g $(resourceGroupName) -n $(webAppNameProd) \
                  --settings NODE_ENV=production API_URL=$(API_URL) DATABASE_URL=$(DATABASE_URL)
                az webapp restart -g $(resourceGroupName) -n $(webAppNameProd)

          - script: |
              # Production Health check
              sleep 30
              curl -f https://$(webAppNameProd).azurewebsites.net || exit 1
            displayName: 'Production Health Check'

          # Store deployment info for rollback
          - script: |
              echo "##vso[task.setvariable variable=PROD_IMAGE_TAG]$(Build.BuildId)"
              echo "##vso[task.setvariable variable=PROD_DEPLOYMENT_TIME]$(date)"
            displayName: 'Store Production Deployment Info'

          # Production Security Validation
          - script: |
              echo "Running production security validation..."
              if [ -f "trivy-results.json" ]; then
                echo "Checking for critical vulnerabilities..."
                # Add logic to check for critical CVEs
              fi
            displayName: 'Production Security Validation'

# Rollback Stage (Manual trigger)
- stage: Rollback
  displayName: 'Rollback Stage'
  dependsOn: []
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
  - deployment: RollbackDeployment
    displayName: 'Rollback Deployment'
    environment: $(prodEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          # Get secrets from Key Vault
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'your-azure-subscription'
              KeyVaultName: $(keyVaultName)
              SecretsFilter: '*'
              RunAsPreJob: true
            displayName: 'Get Secrets from Key Vault'

          - task: AzureCLI@2
            displayName: 'Rollback to previous image (Prod)'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                ROLLBACK_TAG=$(ROLLBACK_IMAGE_TAG)
                if [ -z "$ROLLBACK_TAG" ]; then
                  echo "No rollback tag specified, using 'latest'"
                  ROLLBACK_TAG=latest
                fi
                # ACR creds
                ACR_USERNAME=$(az acr credential show -n $(acrName) --query username -o tsv)
                ACR_PASSWORD=$(az acr credential show -n $(acrName) --query passwords[0].value -o tsv)
                # Point prod web app to previous image tag
                az webapp config container set \
                  -g $(resourceGroupName) -n $(webAppNameProd) \
                  -i $(dockerRegistry)/$(dockerImageName):$ROLLBACK_TAG \
                  -r https://$(dockerRegistry) -u $ACR_USERNAME -p $ACR_PASSWORD
                az webapp restart -g $(resourceGroupName) -n $(webAppNameProd)

          - script: |
              # Health check after rollback
              sleep 30
              curl -f https://$(webAppNameProd).azurewebsites.net || exit 1
            displayName: 'Rollback Health Check'